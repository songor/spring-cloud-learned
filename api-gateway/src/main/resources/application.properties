spring.application.name=api-gateway
server.port=5555
# 请求路由
# 传统路由方式
# 单实例配置
# 当使用 path 与 url 的映射关系来配置路由规则的时候，对于路由转发的请求不会采用 HystrixCommand 来包装，
# 所有这类路由请求没有线程隔离和断路器的保护，并且也不会有负载均衡的能力
#zuul.routes.api-url.path=/api-url/**
#zuul.routes.api-url.url=http://localhost:8080/
# 多实例配置
#zuul.routes.api-url.path=/api-url/**
#zuul.routes.api-url.serviceId=api-url
# 默认情况下 Ribbon 会根据服务发现机制来获取配置服务名对应的实例清单
#ribbon.eureka.enabled=false
#api-url.ribbon.listOfServers=http://localhost:8080/,http://localhost:8081/
# 面向服务的路由
# 在 Eureka 的帮助下，API 网关服务本身就已经维护了系统中所有 serviceId 与实例地址的映射关系
# 在 Zuul 中，路由匹配的路径表达式采用了 Ant 风格定义
zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.serviceId=hello-service
zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.serviceId=feign-consumer
# 简洁的配置方式：zuul.routes.<serviceId>=<path>
#zuul.routes.hello-service=/api-a/**
# 当我们为 Spring Cloud Zuul 构建的 API 网关服务引入 Spring Cloud Eureka 之后，它为 Eureka 中的每个服务都自动创建一个默认路由规则
# 可以使用 zuul.ignored-services 参数来设置一个服务名匹配表达式来定义不自动创建路由的规则
zuul.ignored-services=*
eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/,http://peer2:1112/eureka/
# 路径匹配
# /service/** 和 /service/ext/**
# 路由规则是通过 LinkedHashMap 保存的，也就是说，路由规则的保存是有序的，而内容的加载是通过遍历配置文件中路由规则依次加入的
# 由于 properties 的配置内容无法保证有序，为了保证路由的优先顺序，我们需要使用 YAML 文件来配置，以实现有序的路由规则
# 忽略表达式
# 不希望被 API 网关进行路由的 URL 表达式
#zuul.ignored-patterns=/**/hello/**
# 路由前缀
# 方便全局地为路由规则增加前缀信息
zuul.prefix=/api
# 本地跳转
zuul.routes.api-c.path=/api-c/**
zuul.routes.api-c.url=forward:/local
# Cookie
# 默认情况下，Spring Cloud Zuul 在请求路由时，会过滤掉 HTTP 请求头信息中的一些敏感信息，包括 Cookie、Set-Cookie、Authorization
# 通过设置全局参数为空来覆盖默认值（不推荐）
#zuul.sensitive-headers=
# 通过指定路由的参数来配置，仅对指定的 Web 应用开启对敏感信息的传递
#zuul.routes.<route>.customSensitiveHeaders=true
#zuul.routes.<route>.sensitiveHeaders=
# 重定向
# 网关在进行路由转发前为请求设置 Host 头信息，以标识最初的服务端请求地址
#zuul.addHostHeader=true
# Hystrix 和 Ribbon
# 路由转发请求的 HystrixCommand 执行超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=1000
# 创建请求连接的超时时间
ribbon.ConnectTimeout=1000
# 路由转发请求的超时时间，是对请求连接建立之后的处理时间
ribbon.ReadTimeout=1000
# 在使用 Zuul 的服务路由时，如果路由转发请求发生超时（连接超时或处理超时），只要超时时间的设置小于 Hystrix 的命令超时时间，
# 那么它就会自动发起重试
# 关闭重试机制
#zuul.retryable=false
#zuul.routes.<route>.retryable=false
